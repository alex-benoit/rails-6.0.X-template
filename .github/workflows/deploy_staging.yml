name: Deploy Staging
on:
  push:
    branches:
      - master

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
      - name: Restore gems cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
      - name: Install gems
        run: bundle install --deployment --jobs 4

      - name: Setup node
        uses: actions/setup-node@v1
      - name: Find yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install packages
        run: yarn install --pure-lockfile

      - name: Ruby linter
        run: bundle exec rubocop --parallel
      - name: ERB linter
        run: bundle exec erblint app/**/*.html.erb
      - name: JS linter
        run: yarn lint:js
      - name: SCSS linter
        run: yarn lint:scss

      - name: Static code analysis
        run: bundle exec brakeman -q
      - name: Ruby dependencies vulnerabilities check
        run: bundle exec bundle-audit check --update
      - name: JS dependencies vulnerabilities check
        run: yarn audit; [[ $? -ge 4 ]] && exit 1 || exit 0 # above Moderate onlyÂ https://github.com/yarnpkg/yarn/issues/7260#issuecomment-506556626

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
      - name: Restore gems cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
      - name: Install gems
        run: bundle install --deployment --jobs 4

      - name: Setup node
        uses: actions/setup-node@v1
      - name: Find yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install packages
        run: yarn install --pure-lockfile

      # - name: Install dependent libraries
      #   run: sudo apt-get install libpq-dev

      - name: Setup test database
        env:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
        run: bin/rails db:setup
      - name: Run tests
        run: bin/rspec

  deploy:
    runs-on: ubuntu-latest
    needs: [check, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Log in Docker Client to ECR
        uses: aws-actions/amazon-ecr-login@master

      - name: Build and Push Image to ECR
        run: |
          docker pull ${{ secrets.ECR_REPOSITORY_URL }}:latest || true
          docker build --cache-from ${{ secrets.ECR_REPOSITORY_URL }}:latest -t ${{ secrets.ECR_REPOSITORY_URL }}:${{ github.sha }} -t ${{ secrets.ECR_REPOSITORY_URL }}:latest .
          docker push ${{ secrets.ECR_REPOSITORY_URL }}

      - name: Download latest ECS task definition
        run: aws ecs describe-task-definition --task-definition ivy-staging --query taskDefinition > task-definition.json
      - name: Render new ECS task definition
        id: render-web-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ivy-staging-web
          image: ${{ secrets.ECR_REPOSITORY_URL }}:${{ github.sha }}
      - name: Render new ECS task definition
        id: render-worker-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-task-definition.outputs.task-definition }}
          container-name: ivy-staging-worker
          image: ${{ secrets.ECR_REPOSITORY_URL }}:${{ github.sha }}
      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-task-definition.outputs.task-definition }}
          cluster: ivy-staging
          service: ivy-staging
          wait-for-service-stability: true
          wait-for-minutes: 6
